// Code generated by protoc-gen-go. DO NOT EDIT.
// source: week6/client-streaming.proto

package week6

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CSRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSRequest) Reset()         { *m = CSRequest{} }
func (m *CSRequest) String() string { return proto.CompactTextString(m) }
func (*CSRequest) ProtoMessage()    {}
func (*CSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ea0e7fcd25c2998, []int{0}
}

func (m *CSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSRequest.Unmarshal(m, b)
}
func (m *CSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSRequest.Marshal(b, m, deterministic)
}
func (m *CSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSRequest.Merge(m, src)
}
func (m *CSRequest) XXX_Size() int {
	return xxx_messageInfo_CSRequest.Size(m)
}
func (m *CSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CSRequest proto.InternalMessageInfo

func (m *CSRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CSResponse struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSResponse) Reset()         { *m = CSResponse{} }
func (m *CSResponse) String() string { return proto.CompactTextString(m) }
func (*CSResponse) ProtoMessage()    {}
func (*CSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ea0e7fcd25c2998, []int{1}
}

func (m *CSResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSResponse.Unmarshal(m, b)
}
func (m *CSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSResponse.Marshal(b, m, deterministic)
}
func (m *CSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSResponse.Merge(m, src)
}
func (m *CSResponse) XXX_Size() int {
	return xxx_messageInfo_CSResponse.Size(m)
}
func (m *CSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CSResponse proto.InternalMessageInfo

func (m *CSResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*CSRequest)(nil), "week6.CSRequest")
	proto.RegisterType((*CSResponse)(nil), "week6.CSResponse")
}

func init() { proto.RegisterFile("week6/client-streaming.proto", fileDescriptor_3ea0e7fcd25c2998) }

var fileDescriptor_3ea0e7fcd25c2998 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x4f, 0x4d, 0xcd,
	0x36, 0xd3, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2d, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xcd,
	0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xcb, 0x2a, 0xc9, 0x73, 0x71,
	0x3a, 0x07, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0x94, 0xa4, 0x56,
	0x94, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x2a, 0x5c, 0x5c, 0x20, 0x05,
	0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0xf9, 0xa5, 0x25, 0x05, 0xa5, 0x30,
	0x35, 0x50, 0x9e, 0x91, 0x1d, 0xc8, 0x98, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x43,
	0x2e, 0x36, 0xe7, 0x60, 0xb7, 0xd2, 0xbc, 0x64, 0x21, 0x01, 0x3d, 0xb0, 0x2d, 0x7a, 0x70, 0x2b,
	0xa4, 0x04, 0x91, 0x44, 0x20, 0x66, 0x2a, 0x31, 0x68, 0x30, 0x3a, 0xb1, 0x47, 0x41, 0xdc, 0x93,
	0xc4, 0x06, 0x76, 0x9d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x6e, 0x3d, 0x26, 0xbd, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CSServiceClient is the client API for CSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSServiceClient interface {
	CSFunc(ctx context.Context, opts ...grpc.CallOption) (CSService_CSFuncClient, error)
}

type cSServiceClient struct {
	cc *grpc.ClientConn
}

func NewCSServiceClient(cc *grpc.ClientConn) CSServiceClient {
	return &cSServiceClient{cc}
}

func (c *cSServiceClient) CSFunc(ctx context.Context, opts ...grpc.CallOption) (CSService_CSFuncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CSService_serviceDesc.Streams[0], "/week6.CSService/CSFunc", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSServiceCSFuncClient{stream}
	return x, nil
}

type CSService_CSFuncClient interface {
	Send(*CSRequest) error
	CloseAndRecv() (*CSResponse, error)
	grpc.ClientStream
}

type cSServiceCSFuncClient struct {
	grpc.ClientStream
}

func (x *cSServiceCSFuncClient) Send(m *CSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cSServiceCSFuncClient) CloseAndRecv() (*CSResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CSServiceServer is the server API for CSService service.
type CSServiceServer interface {
	CSFunc(CSService_CSFuncServer) error
}

// UnimplementedCSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCSServiceServer struct {
}

func (*UnimplementedCSServiceServer) CSFunc(srv CSService_CSFuncServer) error {
	return status.Errorf(codes.Unimplemented, "method CSFunc not implemented")
}

func RegisterCSServiceServer(s *grpc.Server, srv CSServiceServer) {
	s.RegisterService(&_CSService_serviceDesc, srv)
}

func _CSService_CSFunc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CSServiceServer).CSFunc(&cSServiceCSFuncServer{stream})
}

type CSService_CSFuncServer interface {
	SendAndClose(*CSResponse) error
	Recv() (*CSRequest, error)
	grpc.ServerStream
}

type cSServiceCSFuncServer struct {
	grpc.ServerStream
}

func (x *cSServiceCSFuncServer) SendAndClose(m *CSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cSServiceCSFuncServer) Recv() (*CSRequest, error) {
	m := new(CSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "week6.CSService",
	HandlerType: (*CSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CSFunc",
			Handler:       _CSService_CSFunc_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "week6/client-streaming.proto",
}
