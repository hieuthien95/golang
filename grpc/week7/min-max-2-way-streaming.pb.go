// Code generated by protoc-gen-go. DO NOT EDIT.
// source: min-max-2-way-streaming.proto

package week7

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MinMaxRequest struct {
	Input                int32    `protobuf:"varint,1,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinMaxRequest) Reset()         { *m = MinMaxRequest{} }
func (m *MinMaxRequest) String() string { return proto.CompactTextString(m) }
func (*MinMaxRequest) ProtoMessage()    {}
func (*MinMaxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fd2f7f9145edf79, []int{0}
}

func (m *MinMaxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinMaxRequest.Unmarshal(m, b)
}
func (m *MinMaxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinMaxRequest.Marshal(b, m, deterministic)
}
func (m *MinMaxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinMaxRequest.Merge(m, src)
}
func (m *MinMaxRequest) XXX_Size() int {
	return xxx_messageInfo_MinMaxRequest.Size(m)
}
func (m *MinMaxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MinMaxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MinMaxRequest proto.InternalMessageInfo

func (m *MinMaxRequest) GetInput() int32 {
	if m != nil {
		return m.Input
	}
	return 0
}

type MinMaxResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinMaxResponse) Reset()         { *m = MinMaxResponse{} }
func (m *MinMaxResponse) String() string { return proto.CompactTextString(m) }
func (*MinMaxResponse) ProtoMessage()    {}
func (*MinMaxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fd2f7f9145edf79, []int{1}
}

func (m *MinMaxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinMaxResponse.Unmarshal(m, b)
}
func (m *MinMaxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinMaxResponse.Marshal(b, m, deterministic)
}
func (m *MinMaxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinMaxResponse.Merge(m, src)
}
func (m *MinMaxResponse) XXX_Size() int {
	return xxx_messageInfo_MinMaxResponse.Size(m)
}
func (m *MinMaxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MinMaxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MinMaxResponse proto.InternalMessageInfo

func (m *MinMaxResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*MinMaxRequest)(nil), "week7.MinMaxRequest")
	proto.RegisterType((*MinMaxResponse)(nil), "week7.MinMaxResponse")
}

func init() { proto.RegisterFile("min-max-2-way-streaming.proto", fileDescriptor_8fd2f7f9145edf79) }

var fileDescriptor_8fd2f7f9145edf79 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0xcd, 0xcc, 0xd3,
	0xcd, 0x4d, 0xac, 0xd0, 0x35, 0xd2, 0x2d, 0x4f, 0xac, 0xd4, 0x2d, 0x2e, 0x29, 0x4a, 0x4d, 0xcc,
	0xcd, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x4f, 0x4d, 0xcd, 0x36,
	0x57, 0x52, 0xe5, 0xe2, 0xf5, 0xcd, 0xcc, 0xf3, 0x4d, 0xac, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x2b, 0x28, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0d, 0x82, 0x70, 0x94, 0x34, 0xb8, 0xf8, 0x60, 0xca, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0xc4, 0xb8, 0xd8, 0x8a, 0x52, 0x8b, 0x4b, 0x73, 0x20, 0x0a, 0x39, 0x83, 0xa0, 0x3c, 0xa3, 0x58,
	0x2e, 0x41, 0xe7, 0xc4, 0x9c, 0xe4, 0xd2, 0x9c, 0xc4, 0x92, 0xfc, 0xa2, 0xe0, 0xd4, 0xa2, 0xb2,
	0xcc, 0xe4, 0x54, 0x21, 0x0f, 0x2e, 0x61, 0x88, 0x76, 0xa3, 0xf0, 0xc4, 0xca, 0x60, 0x98, 0x4b,
	0x84, 0x44, 0xf4, 0xc0, 0x8e, 0xd0, 0x43, 0x71, 0x81, 0x94, 0x28, 0x9a, 0x28, 0xc4, 0x42, 0x25,
	0x06, 0x0d, 0x46, 0x03, 0x46, 0x27, 0xf6, 0x28, 0x88, 0xc3, 0x93, 0xd8, 0xc0, 0xde, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xb1, 0x03, 0x96, 0xe7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	MinMax2WayStreaming(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MinMax2WayStreamingClient, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) MinMax2WayStreaming(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MinMax2WayStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/week7.CalculatorService/MinMax2WayStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceMinMax2WayStreamingClient{stream}
	return x, nil
}

type CalculatorService_MinMax2WayStreamingClient interface {
	Send(*MinMaxRequest) error
	Recv() (*MinMaxResponse, error)
	grpc.ClientStream
}

type calculatorServiceMinMax2WayStreamingClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceMinMax2WayStreamingClient) Send(m *MinMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceMinMax2WayStreamingClient) Recv() (*MinMaxResponse, error) {
	m := new(MinMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	MinMax2WayStreaming(CalculatorService_MinMax2WayStreamingServer) error
}

// UnimplementedCalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) MinMax2WayStreaming(srv CalculatorService_MinMax2WayStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method MinMax2WayStreaming not implemented")
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_MinMax2WayStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).MinMax2WayStreaming(&calculatorServiceMinMax2WayStreamingServer{stream})
}

type CalculatorService_MinMax2WayStreamingServer interface {
	Send(*MinMaxResponse) error
	Recv() (*MinMaxRequest, error)
	grpc.ServerStream
}

type calculatorServiceMinMax2WayStreamingServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceMinMax2WayStreamingServer) Send(m *MinMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceMinMax2WayStreamingServer) Recv() (*MinMaxRequest, error) {
	m := new(MinMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "week7.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MinMax2WayStreaming",
			Handler:       _CalculatorService_MinMax2WayStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "min-max-2-way-streaming.proto",
}
